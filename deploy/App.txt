<!DOCTYPE html>
<html>
<head>
    <title>calculated-field-app</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Oct 15 2014 15:48:50 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Oct 15 2014 15:48:50 GMT-0700 (PDT)";
        var CHECKSUM = 2495760169;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        
      var current_project_id = this.getContext().getProject().ObjectID;
      console.log(current_project_id)
      
      var promises = [];
      promises.push(this._fetchLookbackStore(current_project_id));
      promises.push(this._fetchLookbackStore2(current_project_id));
      Deft.Promise.all(promises).then({
	        scope: this,
	        success: function(items){
	            this._renderGrid(items);
	        },
	        failure: function(error_msg) { alert(error_msg); }
	    });
    },
    _fetchLookbackStore: function(current_project_id){
        var deferred = Ext.create('Deft.Deferred');
    	var me = this; 
        me.logger.log('_fetchLookbackStore start');
    	Ext.create('Rally.data.lookback.SnapshotStore', {
            scope: this,
            listeners: {
                scope: this,
                load: function(store, data, success){
                    me.logger.log('fetchLookbackStore returned data',data);
                    //me._renderGrid(store);
                    deferred.resolve(data);
                }
            },
            autoLoad: true,
            fetch: ['Name','FormattedID','_ProjectHierarchy','Feature','_TypeHierarchy','Blocked','_ValidFrom','_ValidTo','c_BlockerReason','c_BlockerOwner'],
            filters: [{
                      property: '_TypeHierarchy',
                      operator: 'in',
                      value: ['HierarchicalRequirement']
            },{
				property: '_PreviousValues.Blocked',
				value: false
			},{
				property: 'Blocked',
				value: true
			},{
            	property: '_ProjectHierarchy',
            	value: current_project_id
            }]
       });         
    	return deferred.promise;
    	
    },
    _fetchLookbackStore2: function(current_project_id){
    	var deferred = Ext.create('Deft.Deferred');
        var me = this; 
        me.logger.log('_fetchLookbackStore start');
    	Ext.create('Rally.data.lookback.SnapshotStore', {
            scope: this,
            listeners: {
                scope: this,
                load: function(store, data, success){
                    me.logger.log('fetchLookbackStore returned data',data);
                    deferred.resolve(data);
                }
            },
            autoLoad: true,
            fetch: ['Name','FormattedID','_ProjectHierarchy','Feature','_TypeHierarchy','Blocked','_ValidFrom','_ValidTo','c_BlockerReason','c_BlockerOwner'],
            filters: [{
                      property: '_TypeHierarchy',
                      operator: 'in',
                      value: ['HierarchicalRequirement']
            },{
				property: '_PreviousValues.Blocked',
				value: true
			},{
				property: 'Blocked',
				value: false
			},{
            	property: '_ProjectHierarchy',
            	value: current_project_id
            }]
       });    
    	return deferred.promise;
    	
    },
    _renderGrid: function(datas){
    	this.logger.log('_renderGrid');
        var columns = [
           	        {
        	            text: 'FormattedID', dataIndex: 'FormattedID'
        	        },{
        	            text: 'Name', dataIndex: 'Name'
           	        },{
        	            text: 'Project', dataIndex: 'Project'
           	        },{
        	            text: 'StartDate', dataIndex: 'StartDate'
           	        },{
        	            text: 'EndDate', dataIndex: 'EndDate'
           	        },{
        	            text: 'Blocked', dataIndex: 'Blocked'

           	        },{
        	            text: 'Age', dataIndex: 'Age'
           	        }]
    	
        var data_array = this._convertToCustomStore(datas);
        console.log(data_array);
        
    	var grid = Ext.create('Rally.ui.grid.Grid', {
    	    store: Ext.create('Rally.data.custom.Store', {
    	        data: data_array,
    	        autoLoad: true
    	    }),
    	    columnCfgs: columns
    	});
    	this.down('#display_box').add(grid);

    },
    _convertToCustomStore:function(datas){
    	this.logger.log('_convertToCustomStore',datas);
    	var data_hash = {};
    	Ext.each(datas, function(data){
        	console.log(data);
    		Ext.each(data, function(rec){

        		var formatted_id = rec.get('FormattedID');
        		if (!data_hash[formatted_id]){
        			data_hash[formatted_id] = {};
        			data_hash[formatted_id]['StartDate'] = rec.get('_ValidFrom');
        			data_hash[formatted_id]['EndDate'] = rec.get('_ValidFrom');
        		}
        		data_hash[formatted_id]['FormattedID'] = formatted_id;
        		data_hash[formatted_id]['Name'] = rec.get('Name');
        		data_hash[formatted_id]['Project'] = rec.get('Project');
        		data_hash[formatted_id]['Blocked'] = rec.get('Blocked');
        		if (rec.get('Blocked')){
        			data_hash[formatted_id]['StartDate'] = rec.get('_ValidFrom');
        		} else {
        			data_hash[formatted_id]['EndDate'] = rec.get('_ValidFrom');
        		}
        	},this);
    	},this);

        	var data = [];
        	Object.keys(data_hash).forEach(function (key) { 
        		var end_date = new Date(data_hash[key]['EndDate']);
        		var start_date = new Date(data_hash[key]['StartDate']);
        	    var ms = Ext.Date.getElapsed(end_date,start_date);
        	    console.log(ms);
        	    var days = Math.round(ms/1000/60/60/24);
        		data_hash[key]['Age']=days;
        	   console.log(data_hash[key]);
        		data.push(data_hash[key]);
        	})
return data;
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'calculated-field-app'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>