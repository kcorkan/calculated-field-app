<!DOCTYPE html>
<html>
<head>
    <title>calculated-field-app</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Mar 13 2015 10:35:23 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Mar 13 2015 10:35:23 GMT-0700 (PDT)";
        var CHECKSUM = 20559446855;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveTextAsFile: function(textToWrite, fileName)
    {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    }
    
});
Ext.define('Rally.technicalservices.BlockedToolbox',{
    singleton: true,
    /**
     * getBlockedDurations
     *   
     * Returns an array of objects that represent one blocked duration for an artifact and include the following properties:
     *     FormattedID
     *     Name
     *     DateBlocked
     *     DateUnblocked
     *     BlockedReason
     *     
     * Assumes the minimal fetch list:  
     *     Name
     *     FormattedID
     *     _ValidFrom
     *     Blocked
     *     BlockedReason
     *     _PreviousValues.Blocked
     *     _PreviousValues.BlockedReason
     *  
     * Also assumes snapshots are sorted by _ValidFrom in ascending order 
     * 
     */
    getBlockedDurations: function(snaps_by_oid){
        
        var data = [];
        
        Ext.Object.each(snaps_by_oid, function(oid, snaps){
            
            var last_blocked_time = null; 
            var data_record = {FormattedID: null, Name: null, BlockedReason: null, BlockedDate: null, UnblockedDate: null};
            
            Ext.each(snaps, function(snap){
                data_record.FormattedID = snap.FormattedID ;
                data_record.Name = snap.Name ; 
                data_record.Feature = snap.Feature;
                data_record.Project = snap.Project;  
                data_record.c_BlockerOwnerFirstLast = snap.c_BlockerOwnerFirstLast;  
                data_record.c_BlockerCategory = snap.c_BlockerCategory;
                data_record.c_BlockerCreationDate = c_BlockerCreationDate;
                var is_blocked = snap.Blocked ;
                var was_blocked = is_blocked;  
                if (snap._PreviousValues && (snap._PreviousValues.Blocked != undefined)){
                    was_blocked =  snap._PreviousValues.Blocked;
                } else if (snap["_PreviousValues.Blocked"] != null){
                    was_blocked = snap["_PreviousValues.Blocked"];
                }
                
                var reason = snap.BlockedReason || ''; 
                
                var prev_reason = '';  
                if (snap._PreviousValues && (snap._PreviousValues.BlockedReason != undefined)) {
                    prev_reason = snap._PreviousValues.BlockedReason;
                } else if (snap["_PreviousValues.BlockedReason"]){
                    prev_reason = snap["_PreviousValues.BlockedReason"];
                }
                
                var date = Rally.util.DateTime.fromIsoString(snap._ValidFrom);
                if (was_blocked && (is_blocked == false)){
                    data_record.UnblockedDate = date; 
                    data_record.BlockedReason = prev_reason; 
                    data.push(data_record);  //We push this here so that we can start a new one.  
                    data_record = {FormattedID: snap.FormattedID, 
                            Name: snap.Name, 
                            BlockedReason: null, 
                            BlockedDate: null, 
                            UnblockedDate: null};
                    last_blocked_time = null;  
                } 
                
                if (is_blocked && (was_blocked == false)){
                    last_blocked_time = date; 
                }
                if (is_blocked && reason.length > 0 && last_blocked_time){
                    data_record.BlockedReason = reason; 
                    data_record.BlockedDate = last_blocked_time; 
                }
            },this);
            
            if (data_record.BlockedDate && data_record.UnblockedDate == null){
                data.push(data_record);
            }
        },this);
        return data;  
    },
    getCountsByReason: function(snaps_by_oid){
        var counts = {};
        var data = [];  
        Ext.Object.each(snaps_by_oid, function(oid, snaps){
            var rec = {FormattedID: null, Name: null, BlockedReason: null};
            Ext.each(snaps, function(snap){
                rec.Name = snap.Name;  
                rec.FormattedID = snap.FormattedID;
                if (snap.BlockedReason){
                    if (counts[snap.BlockedReason] == undefined){
                        counts[snap.BlockedReason] = 0; 
                    } 
                    rec.BlockedReason = snap.BlockedReason;
                    counts[snap.BlockedReason]++; 
                }
            });
            data.push(rec);
        },this);
        return {counts: counts, data: data};  
    },
    bucketDataByDate: function(artifacts, artifactProperty, dateInterval, dateFormat, bucketedDateStrings){
        var buckets = {};

        Ext.each(bucketedDateStrings, function(str){
            buckets[str] = 0;
        });
        
        Ext.Object.each(artifacts, function(key, artifact){
            if (artifact[artifactProperty]){
                var date = Rally.util.DateTime.fromIsoString(artifact[artifactProperty]);
                var bucket = Rally.util.DateTime.format(date,dateFormat);
                if (Ext.Array.contains(bucketedDateStrings,bucket)){
                    buckets[bucket]++;
                }
            }
        });
        
        return buckets;  
    },
    aggregateBlockedTimelines: function(snaps_by_oid){
        var export_data = [];  
        var reason_data = {};  
       
        //Assumption is that these snaps are still sorted by _ValidFrom in ascending order for each oid
        var block_action = {};  
        
        Ext.Object.each(snaps_by_oid, function(oid, snaps){
            var last_blocked_date = null;
            var blocked_actions = [];  
            var formatted_id = snaps[0].get('FormattedID');

            Ext.each(snaps, function(snap){
                var name = snap.get('Name');
                var reason = snap.get('BlockedReason') || null;
                var previous_reason = snap.get('_PreviousValues.BlockedReason') || null;
                var blocked = snap.get('Blocked');
                var was_blocked = snap.get('_PreviousValues.Blocked');
                var date = Rally.util.DateTime.fromIsoString(snap.get('_ValidFrom'));

                var rec = {FormattedID: formatted_id, BlockedDate: null, UnblockedDate: null, BlockedReason: null};
                if (blocked === true && was_blocked === false){
                    //Transition to blocked
                    last_blocked_date = date;
                    rec.BlockedDate = last_blocked_date;
                    rec.BlockedReason = reason;  
                    rec.Name = name; 
                    blocked_actions.push(rec);
                }
                
                if (was_blocked === true && blocked === false){
                    //Transition from blocked 
                    var rec_found = false; 
                    var idx=-1; 
                    for (var i=0; i<blocked_actions.length; i++){
                        if (blocked_actions[i].BlockedDate == last_blocked_date){
                            idx = i;  
                        }
                    }

                    if (idx<0){
                        idx = blocked_actions.length; 
                        blocked_actions.push(rec);  
                    }
                    blocked_actions[idx].Name = name;  
                    blocked_actions[idx].UnblockedDate = date;  
                    blocked_actions[idx].BlockedReason = previous_reason;  
                    last_blocked_date = null; 
                }
            });
            block_action[formatted_id] = blocked_actions;
        });
        return block_action         
    }
});
Ext.define('AgingCalculator',{
    singleton: true,  
    getFieldHash: function(snapsForOid, arrayOfFields){
        var fieldHash = {};
        Ext.each(snapsForOid, function(snap){
            Ext.each(arrayOfFields, function(f){
                var snapVal = snap[f];
                var currentVal = fieldHash[f] || '';
                fieldHash[f] = snapVal;
            });
        });
        return fieldHash;
    },
    getFieldCurrentValue: function(snapsForOid, field){
        return snapsForOid[snapsForOid.length-1][field];
    },
    calculateMobility: function(snapsForOid, previousValueField, currentField, fieldValue, mobilityField){
        var startValue = null;
        var currentValue = null; 
        if (snapsForOid.length > 0) {            
            var previousValue = snapsForOid[0][currentField];
            var previousValueField = "_PreviousValues." + currentField;
            if (snapsForOid[0][previousValueField] != undefined){
                previousValue = snapsForOid[0][previousValueField];
            }

            Ext.each(snapsForOid, function(snap){
                if (snap[currentField] != previousValue){
                    if (snap[currentField] === fieldValue){
                        startValue = snap[mobilityField];
                    } 
                } 
                previousValue = snap[currentField];
            },this);
            
            currentValue = snapsForOid[snapsForOid.length-1][mobilityField];
        }
        return {startValue: startValue, currentValue: currentValue}
    },
    calculateDurations: function(snapsForOid, currentField, fieldValue, blockedAfterDate){
        var granularity = "second";
        var conversionDivisor = 86400;
        var ages = [];
        var earliestStartDate = null;  
        var lastEndDate = null; 
        
        if (snapsForOid.length > 0) {
            var startDate = null;
            var endDate = Rally.util.DateTime.fromIsoString(snapsForOid[0]._ValidFrom);
            if (blockedAfterDate == undefined || blockedAfterDate == null){
                blockedAfterDate = Rally.util.DateTime.fromIsoString(snapsForOid[0]._ValidFrom);
            }
            
            var previousValue = snapsForOid[0][currentField];
            var previousValueField = "_PreviousValues." + currentField;
            if (snapsForOid[0][previousValueField] != undefined){
                previousValue = snapsForOid[0][previousValueField];
            }
            var isCurrent = false; 
            Ext.each(snapsForOid, function(snap){
                if (snap[currentField] != previousValue){
                    var date = Rally.util.DateTime.fromIsoString(snap._ValidFrom);
                    if (snap[currentField] === fieldValue && date >= blockedAfterDate){
                            startDate = date;
                            if (earliestStartDate == null){
                                earliestStartDate = date; 
                            }
                    } 
                    if (startDate && previousValue === fieldValue){
                        lastEndDate = date;
                        ages.push(Rally.util.DateTime.getDifference(date, startDate,granularity)/conversionDivisor);
                        startDate = null;  
                    }
                } 
                previousValue = snap[currentField];
                if (Rally.util.DateTime.fromIsoString(snap._ValidTo) > new Date()){
                    isCurrent = true;  
                }
            },this);
            
            if (startDate != null && isCurrent){
                ages.push(Rally.util.DateTime.getDifference(new Date(),startDate,granularity)/conversionDivisor);
            }
        }
        return {durations: ages, earliestStartDate: earliestStartDate, lastEndDate: lastEndDate};
    }
    
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

Ext.override(Ext.data.proxy.Server, {
    timeout : 60000,
    processResponse: function(success, operation, request, response, callback, scope) {
        var me = this,
            reader,
            result;

        if (success === true) {
            reader = me.getReader();
            reader.applyDefaults = operation.action === 'read';
            result = reader.read(me.extractResponseData(response));

            if (result.success !== false) {
                
                Ext.apply(operation, {
                    response: response,
                    resultSet: result
                });

                operation.commitRecords(result.records);
                operation.setCompleted();
                operation.setSuccessful();
            } else {
                operation.setException(result.message);
                me.fireEvent('exception', this, response, operation);
            }
        } else {
            if (response) {
                me.setException(operation, response);
            }
            me.fireEvent('exception', this, response, operation);
        }

        
        if (typeof callback == 'function') {
            callback.call(scope || me, operation);
        }

        me.afterRequest(request, success);
    },

    
    setException: function(operation, response) {
        operation.setException({
            status: response.status ,
            statusText: response.statusText
        });
    },

    
    extractResponseData: Ext.identityFn,

    
    applyEncoding: function(value) {
        return Ext.encode(value);
    },
});
Ext.define('Rally.technicalservices.Toolbox',{
    singleton: true,
    /**
     * Returns beginnig of month as date for the current time zone
     * 
     */
    getBeginningOfMonthAsDate: function(dateInMonth){
        var year = dateInMonth.getFullYear();
        var month = dateInMonth.getMonth();
        return new Date(year,month,1,0,0,0,0);
    },
    getEndOfMonthAsDate: function(dateInMonth){
        var year = dateInMonth.getFullYear();
        var month = dateInMonth.getMonth();
        var day = new Date(year, month+1,0).getDate();
        return new Date(year,month,day,0,0,0,0);
    },
    aggregateSnapsByOid: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap);
            
        });
        return snaps_by_oid;
    },
    getCaseInsensitiveKey: function(obj, inputStr){
        var new_key = inputStr;
        Ext.Object.each(obj, function(key, val){
            if (new_key.toLowerCase() == key.toLowerCase()){
                new_key = key;  
            }
         });
        return new_key;

    },
    aggregateSnapsByOidForModel: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap.getData());
            
        });
        return snaps_by_oid;
    },
    getDateBuckets: function(startDate, endDate, granularity){

        var bucketStartDate = Rally.technicalservices.Toolbox.getBeginningOfMonthAsDate(startDate);
        var bucketEndDate = Rally.technicalservices.Toolbox.getEndOfMonthAsDate(endDate);
       
        var date = bucketStartDate;
        
        var buckets = []; 
        while (date<bucketEndDate && bucketStartDate < bucketEndDate){
            buckets.push(date);
            date = Rally.util.DateTime.add(date,granularity,1);
        }
        return buckets;  
    },
    formatDateBuckets: function(buckets, dateFormat){
            var categories = [];
            Ext.each(buckets, function(bucket){
                categories.push(Rally.util.DateTime.format(bucket,dateFormat));
            });
            categories[categories.length-1] += "*"; 
            return categories; 
    },

});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype: 'container', itemId: 'header_box', layout: {type:'hbox'}, items: [
              {xtype:'container',itemId:'control_box',layout:{type:'hbox'}},
              {xtype:'container',itemId:'button_box',layout:{type:'hbox'}},
         ]},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    invalidDateString: 'Invalid Date',
    dateFormat: 'MM/dd/YYYY',
    showOptionsStore: [[true, "Current Blocked Items"],[false, "Items Blocked on or after"]],
    lookbackFetchFields: ['_PreviousValues.Blocked','_SnapshotNumber','Name','FormattedID','_ProjectHierarchy','Feature','_TypeHierarchy','Blocked','_ValidFrom','_ValidTo','BlockedReason','c_BlockerOwnerFirstLast','c_BlockerCategory','c_BlockerCreationDate','DirectChildrenCount','Feature','Iteration'],
    featureHash: {},
    launch: function() {
//    	this.down('#control_box').add({
//    	    xtype: 'rallycombobox',
//    	    itemId: 'cb-option',
//    	    fieldLabel: 'Show Artifacts',
//    	    labelAlign: 'right',
//    	    width: 275,
//    	    margin: 10,
//    	    store: this.showOptionsStore,
//    	    listeners: {
//    	        scope: this,
//    	        change: this._showDatePicker
//    	    }
//    	});

        this.down('#control_box').add({
            xtype: 'rallycheckboxfield',
            itemId: 'chk-blocked',
            fieldLabel: 'Blocked Only',
            labelAlign: 'right',
            labelWidth: 100,
            margin: 10,
            value: true 
        });

        this.down('#control_box').add({
            xtype: 'rallydatefield',
            itemId: 'from-date-picker',
            fieldLabel: 'Items blocked on or after',
            labelAlign: 'right',
            labelWidth: 150,
            margin: 10,
         });

    	this.down('#button_box').add({
    		xtype: 'rallybutton',
    		itemId: 'run-button',
    		text: 'Run',
            margin: 10,
    		scope:this,
    		handler: this._run,
    		//disabled: true
    	});
    	this.down('#button_box').add({
    		xtype: 'rallybutton',
    		itemId: 'export-button',
    		text: 'Export',
            margin: 10,
    		scope: this,
    		handler: this._exportData,
    		//disabled: true
    	});
    },
    _showDatePicker: function(cb){
        if (cb.getValue() === true){
            if(this._getFromDateControl()){
                this._getFromDateControl().destroy();
            }
        } else {
            this.down('#control_box').add({
               xtype: 'rallydatefield',
               itemId: 'from-date-picker',
               margin: 10,
            });
        }
    },
    _getFromDateControl: function(){
        return this.down('#from-date-picker');
    },
    _getFromDate: function(){
        if (this._getFromDateControl()){
            var fromDate = this._getFromDateControl().getValue();
            if (!isNaN(Date.parse(fromDate))){
                return fromDate;
            }
        }
        return null;
    },
    _showOnlyBlockedItems: function(){
        if (this.down('#chk-blocked')){
            return this.down('#chk-blocked').getValue();
        }
        return false;  
    },
    _run: function(){
        
        var fromDate = this._getFromDate();
        if (isNaN(Date.parse(fromDate))){
            Rally.ui.notify.Notifier.showWarning({message: "No date selected.  Please select a date and try again."});
            return;
        }
        
        var current_project_id  = this.getContext().getProject().ObjectID;
        
        this.setLoading(true);
    	this._fetchLookbackStore(current_project_id, fromDate).then({
    	    scope: this,
    	    success: this._calculateAgingForBlockers
    	});
    },
    _fetchLookbackStore: function(currentProjectId, fromDate){
        var deferred = Ext.create('Deft.Deferred');
        
        var find = {};  
        var isoFromDate = Rally.util.DateTime.toIsoString(fromDate);
        find["_ValidTo"] = {$gte: isoFromDate};
        find["$or"] = [{"_PreviousValues.Blocked":true},{"Blocked": true}];
        find["_TypeHierarchy"] = 'HierarchicalRequirement';
        find["_ProjectHierarchy"] = currentProjectId;  
        
    	Ext.create('Rally.data.lookback.SnapshotStore', {
            scope: this,
            listeners: {
                scope: this,
                load: function(store, data, success){
                    this.logger.log('fetchLookbackStore load',data.length, success);
                    var snaps_by_oid = Rally.technicalservices.Toolbox.aggregateSnapsByOidForModel(data);
                    deferred.resolve(snaps_by_oid);
                }
            },
            autoLoad: true,
            fetch: this.lookbackFetchFields, 
            hydrate: ["Iteration","Project"],
            find: find,
            sort: {'_ValidFrom': 1}
       });         
       return deferred.promise;
    },
    _fetchFeatureHash: function(){
    	var deferred = Ext.create('Deft.Deferred');
        var me = this; 
        me.logger.log('_fetchFeatureHash start');
    	Ext.create('Rally.data.lookback.SnapshotStore', {
            scope: this,
            listeners: {
                scope: this,
                load: function(store, data, success){
                    me.logger.log('_fetchFeatureHash returned data',data);
                    Ext.each(data, function(d){
                        var key = d.get('ObjectID').toString();
                        this.featureHash[key] = d.getData();
                    }, this);
                    deferred.resolve(data);
                }
            },
            autoLoad: true,
            fetch: ['Name', 'FormattedID', 'ObjectID'], 
            find: {
                "_TypeHierarchy": "PortfolioItem/Feature",
                "__At": "current"
            },
       });    
       return deferred.promise;
    
    },
    _renderGrid: function(data){
        var columns = [{text: 'FormattedID', dataIndex: 'FormattedID'},
                       {text: 'Name', dataIndex: 'Name', flex: 1},
                       {text: 'Project', dataIndex: 'Project', renderer: this._objectNameRenderer},
                       {text: 'Feature', dataIndex: 'Feature', renderer: this._featureOidRenderer},
                       {text: 'Blocked', dataIndex: 'Blocked'},
                       {text: 'Total Blocked Time (Days)', dataIndex: 'totalBlocked', renderer: this._decimalRenderer}];
            columns.push({text: 'Average Resolution Time (Days)', dataIndex: 'averageResolutionTime', renderer: this._decimalRenderer});
            columns.push({text: '#Durations', dataIndex: 'numDurations'});
            columns.push({text: 'Iteration Blocked In', dataIndex: 'startValue', renderer: this._objectNameRenderer});
            columns.push({text: 'Current Iteration', dataIndex: 'currentValue', renderer: this._objectNameRenderer});

        if (this.down('#data-grid')){
            this.down('#data-grid').destroy();
        }
        
        var grid = Ext.create('Rally.ui.grid.Grid', {
            itemId: 'data-grid',
            store: Ext.create('Rally.data.custom.Store', {
                data: data,
                autoLoad: true
            }),
            columnCfgs: columns
        });
        this.down('#display_box').add(grid);
        this.setLoading(false);
    },
    _decimalRenderer: function(v,m,r){
        if (!isNaN(v)){
            return v.toFixed(1);
        }
        return v; 
    },
    _featureOidRenderer: function(v,m,r){
        if (v && typeof v == 'object'){
            return Ext.String.format('{0}: {1}', v.FormattedID, v.Name);
        }
        return v; 
    },
    _objectNameRenderer: function(v,m,r){
        if (v && typeof v == 'object'){
            return v.Name;
        }
        return v;
    },

    _calculateAgingForBlockers: function(snapsByOid){
        this.logger.log('_calculateAgingForBlockers',snapsByOid);
        var desiredFields = ['FormattedID','Name','Feature','Project','BlockedReason','Blocked'];
        var data = [];
        var fromDate = this._getFromDate() || null; 
        
        Ext.Object.each(snapsByOid, function(oid, snaps){
            var fieldObj = AgingCalculator.getFieldHash(snaps, desiredFields);
            var agingObj = AgingCalculator.calculateDurations(snaps,"Blocked",true,fromDate);
            var mobilityObj = AgingCalculator.calculateMobility(snaps,"_PreviousValues.Blocked","Blocked",true,"Iteration");
            var record = _.extend(fieldObj, mobilityObj);
            
            this.logger.log(fieldObj,agingObj,mobilityObj);
            
            record["numDurations"] = agingObj.durations.length;
            record["averageResolutionTime"] = '--';
            if (agingObj.durations.length > 0){
                record["totalBlocked"] = Ext.Array.sum(agingObj.durations);
                var mean_array = agingObj.durations;  
                if (record["Blocked"]){
                    //don't include the current block in the mean.
                    mean_array = agingObj.durations.slice(0,-1);
                } 
                if (mean_array.length > 0){
                    record["averageResolutionTime"] = Ext.Array.mean(mean_array);
                }
                
                if (!this._showOnlyBlockedItems() || (this._showOnlyBlockedItems && record["Blocked"])){
                    data.push(record); 
                }
                
            }
            
        },this);
        this.logger.log('_calculateAgingForBlockers',data);
        this._renderGrid(data);
    },

    _exportData: function(data){
     	var keys = Object.keys(data[0]);
     	var text = keys.join(',') + '\n';
    	Ext.each(data, function(d){
     		Ext.each(keys, function(key){
     			var val = d[key] || '';
     			if (/\n|,|\t/.test(val)){
           			text += Ext.String.format("\"{0}\",", val);
     			} else {
         			text += Ext.String.format("{0},", val);
     			}
     		});
     		text += '\n';
    	});
    	Rally.technicalservices.FileUtilities.saveTextAsFile(text, 'data.csv');
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'calculated-field-app'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>